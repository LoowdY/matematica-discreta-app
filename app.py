import streamlit as st
import sympy as sp
import random
import matplotlib.pyplot as plt
import numpy as np
import networkx as nx
import os

st.set_page_config(
    page_title="Indu√ß√£o Matem√°tica - CC2TA",
    page_icon="üìö",
    layout="centered",
    initial_sidebar_state="expanded"
)


def main():
    st.title('Aprendendo Indu√ß√£o Matem√°tica')

    
    st.sidebar.title('Navega√ß√£o')
    options = ["Introdu√ß√£o", "Indu√ß√£o Padr√£o", "Indu√ß√£o Forte", "Indu√ß√£o Estrutural", "Question√°rio", "Exerc√≠cios Extras", "D√∫vidas Comuns"]
    choice = st.sidebar.radio("Escolha uma se√ß√£o", options)

    if choice == "Introdu√ß√£o":
        st.subheader("O que √© Indu√ß√£o Matem√°tica?")
        st.write("""
        A indu√ß√£o matem√°tica √© uma t√©cnica poderosa usada para provar que uma afirma√ß√£o √© verdadeira para todos os n√∫meros inteiros a partir de um certo ponto. O m√©todo √© particularmente √∫til para teoremas que envolvem n√∫meros naturais e √© aplicado em dois passos principais:
        1. **Base da Indu√ß√£o**: Verificar a validade da proposi√ß√£o para um caso inicial espec√≠fico.
        2. **Passo Indutivo**: Demonstrar que, se a proposi√ß√£o √© verdadeira para um n√∫mero arbitr√°rio \( k \), ent√£o ela deve ser verdadeira para o pr√≥ximo n√∫mero \( k+1 \).

        Vamos explorar isso com um exemplo cl√°ssico.
        """)

        st.subheader("Exemplo 1: Soma dos Primeiros \( n \) N√∫meros Naturais")

        st.write("""
        Queremos provar que a soma dos primeiros \( n \) n√∫meros naturais √© dada pela f√≥rmula:
        """)

        st.latex(r'''
        S_n = \frac{n(n + 1)}{2}
        ''')

        st.write("""
        **Base da Indu√ß√£o**:
        Vamos verificar a f√≥rmula para \( n = 1 \):
        """)

        st.latex(r'''
        S_1 = \frac{1(1 + 1)}{2} = 1
        ''')

        st.write("""
        A soma dos primeiros 1 n√∫mero natural √© realmente 1, ent√£o a base da indu√ß√£o est√° correta.

        **Passo Indutivo**:
        Suponha que a f√≥rmula seja verdadeira para um n√∫mero arbitr√°rio \( k \). Ou seja, assumimos que:
        """)

        st.latex(r'''
        S_k = \frac{k(k + 1)}{2}
        ''')

        st.write("""
        Devemos mostrar que a f√≥rmula √© verdadeira para \( k + 1 \). A soma dos primeiros \( k + 1 \) n√∫meros naturais √©:
        """)

        st.latex(r'''
        S_{k+1} = S_k + (k + 1)
        ''')

        st.write("""
        Substituindo a f√≥rmula assumida para \( S_k \):
        """)

        st.latex(r'''
        S_{k+1} = \frac{k(k + 1)}{2} + (k + 1)
        ''')

        st.write("""
        Simplificando:
        """)

        st.latex(r'''
        S_{k+1} = \frac{k(k + 1) + 2(k + 1)}{2} = \frac{(k + 1)(k + 2)}{2}
        ''')

        st.write("""
        Portanto, a f√≥rmula tamb√©m se aplica para \( k + 1 \), e a indu√ß√£o est√° completa.

        Assim, a f√≥rmula para a soma dos primeiros \( n \) n√∫meros naturais est√° comprovada por indu√ß√£o matem√°tica.
        """)

        st.subheader("Exemplo 2: Propriedade dos N√∫meros Pares")

        st.write("""
        Vamos provar que todo n√∫mero par positivo pode ser expresso como a soma de dois n√∫meros primos. Isto √© conhecido como a Conjectura de Goldbach.

        **Base da Indu√ß√£o**:
        Para \( n = 2 \), o n√∫mero 2 √© par e pode ser expresso como a soma de 1 + 1 (note que, tradicionalmente, consideramos n√∫meros primos come√ßando de 2, ent√£o esse exemplo n√£o √© ideal, mas demonstra a ideia). Para \( n = 4 \):
        """)

        st.latex(r'''
        4 = 2 + 2
        ''')

        st.write("""
        **Passo Indutivo**:
        Suponha que todo n√∫mero par menor que um certo n√∫mero \( k \) pode ser expresso como a soma de dois n√∫meros primos. Devemos mostrar que o n√∫mero \( k + 2 \) tamb√©m pode ser expresso desta forma.

        Se \( k + 2 \) √© um n√∫mero par maior que 2, ent√£o pode ser expresso como a soma de dois n√∫meros primos conforme a hip√≥tese de indu√ß√£o. Por exemplo, se \( k = 6 \):
        """)

        st.latex(r'''
        6 = 3 + 3
        ''')

        st.write("""
        Ent√£o para \( k + 2 = 8 \):
        """)

        st.latex(r'''
        8 = 3 + 5
        ''')

        st.write("""
        Continuamos a verificar para outros n√∫meros, e se todos os n√∫meros pares menores que \( k + 2 \) seguem a conjectura, ent√£o \( k + 2 \) tamb√©m o faz.

        **Nota**: A Conjectura de Goldbach ainda n√£o foi provada formalmente para todos os n√∫meros, mas √© um exemplo de como a indu√ß√£o matem√°tica √© aplicada para verificar propriedades conjecturais.
        """)

    elif choice == "Indu√ß√£o Padr√£o":
        
        run_standard_induction()

    elif choice == "Indu√ß√£o Forte":
        
        run_strong_induction()

    elif choice == "Indu√ß√£o Estrutural":
        
        run_structural_induction()

    elif choice == "Question√°rio":
        
        run_quiz()

    elif choice == "Exerc√≠cios Extras":
        
        run_exercises_2()

    elif choice == "D√∫vidas Comuns":
        
        run_faq()
def run_standard_induction():
    st.write("""
    ### Indu√ß√£o Padr√£o
    A indu√ß√£o padr√£o √© uma t√©cnica fundamental em matem√°tica para provar que uma propriedade √© v√°lida para todos os n√∫meros naturais.
    """)

    # Interatividade 1: Definir a base da indu√ß√£o
    base = st.number_input("Escolha um valor inicial para a base da indu√ß√£o (n=1)", min_value=1, step=1, value=1)
    st.write(f"Voc√™ escolheu n={base} como base da indu√ß√£o.")

    # Interatividade 2: Calcular uma soma b√°sica
    n = sp.symbols('n')
    expr = sp.Sum(n, (n, 1, base))
    simplified_expr = sp.simplify(expr.doit())
    st.latex(sp.latex(simplified_expr))

    # Interatividade 3: Verificar se a f√≥rmula da soma est√° correta
    st.write("Vamos verificar a f√≥rmula para a soma dos primeiros n n√∫meros.")
    formula = st.text_input("Digite a f√≥rmula que voc√™ acha que representa a soma dos primeiros n n√∫meros:")
    if formula:
        st.write("Sua f√≥rmula √©:", formula)
        st.latex(r"\text{F√≥rmula padr√£o: } \frac{n(n+1)}{2}")
        if formula == r"n(n+1)/2":
            st.success("Correto!")
        else:
            st.error("Tente novamente!")

def run_strong_induction():
    st.write("""
    ### Indu√ß√£o Forte
    A indu√ß√£o forte √© utilizada quando a validade de uma afirma√ß√£o para um n√∫mero depende da validade para todos os n√∫meros menores que ele.
    """)

    # Interatividade 1: Escolha um n√∫mero n para o qual voc√™ quer verificar a f√≥rmula
    n_value = st.number_input("Escolha um valor de n para verificar a f√≥rmula", min_value=1, step=1, value=2)
    st.write(f"Voc√™ escolheu n={n_value}")

    # Definir n como uma vari√°vel simb√≥lica
    n = sp.symbols('n')

    # Interatividade 2: Mostrar a soma de uma s√©rie geom√©trica at√© n
    expr = sum([2**i for i in range(1, n_value + 1)])
    st.write(f"A soma dos termos at√© n={n_value} √©:")
    st.latex(sp.latex(expr))

    # Interatividade 3: Pedir ao usu√°rio para adivinhar a soma incluindo o pr√≥ximo termo
    next_term_value = 2**(n_value + 1)
    correct_next_sum = expr + next_term_value
    
    st.write(f"Vamos adicionar o pr√≥ximo termo, $2^{{{n_value + 1}}}$, √† soma anterior.")
    guess = st.number_input(f"Tente adivinhar o valor da soma at√© n={n_value + 1}:", value=0)
    
    if st.button("Verificar"):
        if guess == correct_next_sum:
            st.success(f"Correto! A soma at√© n={n_value + 1} √© realmente {correct_next_sum}.")
        else:
            st.error(f"Incorreto. A soma correta at√© n={n_value + 1} √© {correct_next_sum}.")

    # Plotar a soma dos termos da sequ√™ncia at√© n_value
    n_values = np.arange(1, n_value + 2)
    sums = [sum([2**i for i in range(1, int(n) + 1)]) for n in n_values]
    
    plt.figure(figsize=(10, 6))
    plt.plot(n_values, sums, marker='o', linestyle='-', color='b', label='Soma dos termos da sequ√™ncia')
    plt.axhline(y=correct_next_sum, color='r', linestyle='--', label=f'Soma at√© n={n_value + 1}')
    plt.title('Soma dos Termos de uma Sequ√™ncia Geom√©trica (2^n)')
    plt.xlabel('n')
    plt.ylabel('Soma acumulada')
    plt.legend()
    plt.grid(True)
    
    st.pyplot(plt)

def plot_tree(height):
    """Fun√ß√£o para plotar uma √°rvore bin√°ria completa com n√≥s numerados"""
    G = nx.Graph()
    
    # Adiciona n√≥s e arestas para uma √°rvore bin√°ria completa
    for i in range(2**height - 1):
        G.add_node(i+1)
        left_child = 2 * (i + 1)
        right_child = left_child + 1
        if left_child <= 2**height - 1:
            G.add_edge(i + 1, left_child)
        if right_child <= 2**height - 1:
            G.add_edge(i + 1, right_child)

    # Utilizando o layout do spring layout
    pos = nx.spring_layout(G, seed=42)  # Usando o seed para resultados consistentes
    
    plt.figure(figsize=(8, 8))
    nx.draw(G, pos, with_labels=True, node_size=700, node_color="skyblue", font_size=15, font_weight="bold")
    st.pyplot(plt)

def run_structural_induction():
    st.write("""
    ### Indu√ß√£o Estrutural
    Usada para estruturas definidas recursivamente, como √°rvores ou sequ√™ncias complexas.
    """)

    # Interatividade 1: Escolher uma estrutura simples (ex: sequ√™ncia ou √°rvore)
    structure = st.selectbox("Escolha uma estrutura para aplicar a indu√ß√£o estrutural:", ["Sequ√™ncia", "√Årvore"])
    st.write(f"Voc√™ escolheu: {structure}")

    # Interatividade 2: Inserir o tamanho da estrutura
    size = st.number_input(f"Escolha o tamanho da {structure.lower()} (ex: n√∫mero de elementos ou altura)", min_value=1, step=1, value=3)
    st.write(f"Tamanho escolhido: {size}")

    # Definir n como uma vari√°vel simb√≥lica
    n = sp.symbols('n')

    if structure == "Sequ√™ncia":
        st.write("Vamos calcular a soma dos quadrados dos primeiros elementos da sequ√™ncia.")
        
        # Calculando a soma dos quadrados at√© o tamanho escolhido
        expr = sp.Sum(n**2, (n, 1, size))
        sum_sequence = expr.doit()
        st.latex(sp.latex(sum_sequence))
        
        # Gerando os valores da sequ√™ncia para o gr√°fico
        n_values = np.arange(1, size + 1)
        sums = [sum([i**2 for i in range(1, int(n) + 1)]) for n in n_values]
        
        # Plotando o gr√°fico da sequ√™ncia
        plt.figure(figsize=(10, 6))
        plt.plot(n_values, sums, marker='o', linestyle='-', color='g', label='Soma dos quadrados da sequ√™ncia')
        plt.title('Soma dos Quadrados de uma Sequ√™ncia')
        plt.xlabel('n')
        plt.ylabel('Soma acumulada')
        plt.legend()
        plt.grid(True)
        
        st.pyplot(plt)
    
    elif structure == "√Årvore":
        st.write("Vamos calcular o n√∫mero total de n√≥s em uma √°rvore bin√°ria completa.")
        
        # Calculando o n√∫mero de n√≥s em uma √°rvore bin√°ria completa de altura 'size'
        num_nodes = 2**size - 1
        st.latex(f"O n√∫mero total de n√≥s em uma √°rvore bin√°ria de altura {size} √© {num_nodes}.")
        
        # Plotando a √°rvore bin√°ria completa
        plot_tree(size)


def run_quiz():
    questions = {
        "Indu√ß√£o Padr√£o": [
            ("Qual √© o primeiro passo em uma prova por indu√ß√£o padr√£o?", [
                "Verificar a proposi√ß√£o para n=1",
                "Aplicar o passo indutivo",
                "Generalizar para todos os n√∫meros",
                "Nenhuma das anteriores"], "Verificar a proposi√ß√£o para n=1"),
            ("O que √© necess√°rio para concluir uma prova por indu√ß√£o padr√£o?", [
                "Um passo indutivo bem definido",
                "Apenas a base da indu√ß√£o",
                "Um contraexemplo",
                "Generaliza√ß√£o imediata"], "Um passo indutivo bem definido"),
        ],
        "Indu√ß√£o Forte": [
            ("Como a indu√ß√£o forte difere da indu√ß√£o padr√£o?", [
                "Usa todos os casos anteriores",
                "Usa apenas o caso n-1",
                "N√£o requer um caso base",
                "Sempre resulta em uma prova mais curta"], "Usa todos os casos anteriores"),
            ("Quando √© mais adequado usar a indu√ß√£o forte?", [
                "Quando cada caso depende de todos os anteriores",
                "Quando apenas o primeiro caso √© relevante",
                "Em problemas de contagem simples",
                "Para demonstrar falsidade"], "Quando cada caso depende de todos os anteriores"),
        ],
        "Indu√ß√£o Estrutural": [
            ("Qual √© um exemplo de uso de indu√ß√£o estrutural?", [
                "Provar propriedades sobre √°rvores bin√°rias",
                "Somas de s√©ries num√©ricas",
                "Calculando derivadas",
                "Resolvendo equa√ß√µes lineares"], "Provar propriedades sobre √°rvores bin√°rias"),
            ("O que diferencia a indu√ß√£o estrutural das outras formas de indu√ß√£o?", [
                "Foca em estruturas definidas recursivamente",
                "Foca apenas em n√∫meros inteiros",
                "N√£o usa um caso base",
                "Usa diferencia√ß√£o para provar"], "Foca em estruturas definidas recursivamente"),
        ]
    }

    for key, value in questions.items():
        st.write(f"### Perguntas sobre {key}")
        for question, options, correct_answer in value:
            answer = st.radio(question, options)
            if st.button(f'Verificar resposta - {question}'):
                if answer == correct_answer:
                    st.success("Correto!")
                else:
                    st.error("Incorreto. Tente novamente.")

def run_faq():
    st.write("### Respostas para D√∫vidas Comuns")
    
    questions = [
        "O que acontece se a base da indu√ß√£o n√£o for verdadeira?",
        "√â poss√≠vel usar indu√ß√£o matem√°tica em conjuntos que n√£o s√£o n√∫meros naturais?",
        "Como diferenciar quando usar indu√ß√£o forte ou padr√£o?",
        "Como a indu√ß√£o matem√°tica se aplica a sequ√™ncias definidas recursivamente?",
        "Qual √© a import√¢ncia da base da indu√ß√£o em provas com m√∫ltiplas bases?",
        "Pode-se usar indu√ß√£o para provar desigualdades? Como?"
    ]

    for i, question in enumerate(questions):
        st.write(f"**{i + 1}. {question}**")
    
    if st.button("Mostrar Respostas"):
        # Resposta 1
        st.write("#### 1. O que acontece se a base da indu√ß√£o n√£o for verdadeira?")
        st.write("Se a base da indu√ß√£o n√£o for verdadeira, a prova por indu√ß√£o falha. Sem uma base verdadeira, n√£o podemos garantir que a proposi√ß√£o √© verdadeira para todos os casos subsequentes.")
        st.write("**Prova Matem√°tica:**")
        n = sp.symbols('n')
        P_n = n**2 >= n
        st.write("Considere a proposi√ß√£o P(n): n¬≤ ‚â• n.")
        st.write("A prova por indu√ß√£o segue dois passos:")
        st.write("1. **Base da Indu√ß√£o:** Verifique P(1). Se P(1) for falsa, ent√£o a proposi√ß√£o falha para n = 1, e n√£o h√° como garantir a validade de P(n) para qualquer n ‚â• 1.")
        st.write("2. **Passo Indutivo:** Suponha que P(k) √© verdadeira para algum k ‚â• 1, e mostre que isso implica P(k+1). Se a base for falsa, a cadeia de implica√ß√µes n√£o come√ßa.")
        P_k1 = (n + 1)**2 >= (n + 1)
        st.write("Exemplo para o caso k+1:")
        st.latex(sp.latex(P_k1))

        # Resposta 2
        st.write("#### 2. √â poss√≠vel usar indu√ß√£o matem√°tica em conjuntos que n√£o s√£o n√∫meros naturais?")
        st.write("Sim, √© poss√≠vel usar indu√ß√£o matem√°tica em conjuntos que n√£o s√£o n√∫meros naturais, desde que o conjunto tenha uma estrutura semelhante aos n√∫meros naturais.")
        st.write("**Prova Matem√°tica:**")
        st.write("A indu√ß√£o pode ser aplicada em qualquer conjunto que satisfa√ßa o princ√≠pio do bom ordenamento.")
        st.write("**Exemplo:**")
        k = sp.symbols('k')
        expr = 2*k
        st.write("Considere o conjunto dos n√∫meros pares positivos:")
        st.latex(sp.latex(expr))
        P_2k = 2*k >= 2
        st.write("A proposi√ß√£o para os n√∫meros pares pode ser representada como:")
        st.latex(sp.latex(P_2k))
        st.write("Esse conjunto se comporta de forma semelhante ao conjunto dos n√∫meros naturais, permitindo que a indu√ß√£o seja aplicada.")

        # Resposta 3
        st.write("#### 3. Como diferenciar quando usar indu√ß√£o forte ou padr√£o?")
        st.write("A indu√ß√£o forte √© utilizada quando o caso n+1 depende de v√°rios casos anteriores, n√£o apenas do caso n.")
        st.write("**Prova Matem√°tica:**")
        P_n = sp.symbols('P_n')
        st.write("- **Indu√ß√£o Padr√£o:** Prova-se P(n) assumindo que P(k) √© verdadeira para k = n.")
        st.latex(sp.latex(P_n))
        st.write("- **Indu√ß√£o Forte:** Prova-se P(n) assumindo que P(k) √© verdadeira para todos os k ‚â§ n.")
        st.write("**Exemplo:** Vamos provar que todo n√∫mero n ‚â• 2 pode ser fatorado em n√∫meros primos.")
        st.write("- **Indu√ß√£o Padr√£o:** Assumimos que n pode ser fatorado e, ent√£o, mostramos que n+1 tamb√©m pode.")
        st.write("- **Indu√ß√£o Forte:** Assumimos que todos os k ‚â§ n podem ser fatorados em primos e, ent√£o, usamos essa informa√ß√£o para provar que n+1 tamb√©m pode.")

        # Resposta 4
        st.write("#### 4. Como a indu√ß√£o matem√°tica se aplica a sequ√™ncias definidas recursivamente?")
        st.write("A indu√ß√£o matem√°tica pode ser aplicada para provar propriedades de sequ√™ncias definidas recursivamente.")
        st.write("**Prova Matem√°tica:**")
        a_n = sp.symbols('a_n')
        a_n_formula = 2**sp.symbols('n') - 1
        st.write("Suponha uma sequ√™ncia a_n definida por a_1 = 1 e a_{n+1} = 2a_n + 1. Queremos provar que:")
        st.latex(sp.latex(a_n_formula))
        st.write("para todos os n ‚â• 1.")
        st.write("**Passo Indutivo:**")
        k = sp.symbols('k')
        a_k = 2**k - 1
        st.write(f"a_{{k+1}} = 2 * ({a_k}) + 1")
        st.latex(sp.latex(2*(2**k - 1) + 1))

        # Resposta 5
        st.write("#### 5. Qual √© a import√¢ncia da base da indu√ß√£o em provas com m√∫ltiplas bases?")
        st.write("Em provas por indu√ß√£o com m√∫ltiplas bases, cada base da indu√ß√£o estabelece a veracidade da proposi√ß√£o em diferentes pontos iniciais.")
        st.write("**Prova Matem√°tica:**")
        P_n = sp.symbols('P_n')
        st.write("Considere uma proposi√ß√£o P(n) verdadeira para todos os n ‚â• 1, dependendo de P(n) para n = 1 e n = 2.")
        st.latex(sp.latex(P_n))
        st.write("No passo indutivo, mostramos que P(k) para k ‚â• 2 implica P(k+1). Ambas as bases s√£o necess√°rias para garantir que a proposi√ß√£o seja v√°lida para todo n ‚â• 1.")

        # Resposta 6
        st.write("#### 6. Pode-se usar indu√ß√£o para provar desigualdades? Como?")
        st.write("Sim, a indu√ß√£o matem√°tica √© uma t√©cnica poderosa para provar desigualdades.")
        st.write("**Prova Matem√°tica:**")
        n = sp.symbols('n')
        inequality = 2**n >= n**2
        st.write("Vamos provar que:")
        st.latex(sp.latex(inequality))
        st.write("para todos os n ‚â• 4.")
        st.write("**Base da Indu√ß√£o:**")
        st.write("2^4 = 16 ‚â• 4^2 = 16")
        st.write("**Passo Indutivo:**")
        step = 2**(n+1) >= (n+1)**2
        st.write("Suponha que 2^k ‚â• k^2 para algum k ‚â• 4. Queremos provar que:")
        st.latex(sp.latex(step))


def run_exercises_2():
    st.title("Exerc√≠cios de Matem√°tica Discreta")

    # Definindo os s√≠mbolos
    n, k, i = sp.symbols('n k i')

    # Exerc√≠cio 1
    st.latex(r"Exerc√≠cio\ 1:\ Divisibilidade\ de\ n^3 - n\ por\ 6")
    st.latex(r"Queremos\ provar\ que\ a\ express√£o\ n^3 - n\ √©\ divis√≠vel\ por\ 6\ para\ todo\ n \geq 1.")
    
    if st.button("Mostrar Respostas Exerc√≠cio 1"):
        st.latex(r'''
        \textbf{Divisibilidade por 2:}
        \text{Observamos que entre } n-1, n, \text{ e } n+1, \text{ pelo menos um deles √© par.}
        \text{Portanto, o produto } n(n-1)(n+1) \text{ √© divis√≠vel por 2.}
        ''')

        st.latex(r'''
        \textbf{Divisibilidade por 3:}
        \text{Agora, analisemos a divisibilidade por 3 considerando os casos:}
        ''')

        st.latex(r'''
        \begin{cases}
        n \equiv 0 \pmod{3} & \text{ent√£o } n^3 - n \equiv 0 \pmod{3} \\
        n \equiv 1 \pmod{3} & \text{ent√£o } n^3 - n \equiv 0 \pmod{3} \\
        n \equiv 2 \pmod{3} & \text{ent√£o } n^3 - n \equiv 0 \pmod{3}
        \end{cases}
        ''')

        st.latex(r'''
        \text{Portanto, como } n^3 - n \text{ √© divis√≠vel tanto por 2 quanto por 3, ele √© divis√≠vel por 6.}
        ''')

    # Exerc√≠cio 2
    st.latex(r"Exerc√≠cio\ 2:\ Soma\ dos\ Primeiros\ n\ N√∫meros\ √çmpares")
    st.latex(r"Prove\ que\ a\ soma\ dos\ primeiros\ n\ n√∫meros\ √≠mpares\ √©\ igual\ a\ n^2.")

    if st.button("Mostrar Respostas Exerc√≠cio 2"):
        st.latex(r'''
        \textbf{Base da Indu√ß√£o:}
        \text{Para } n = 1, \text{ a soma dos primeiros 1 n√∫mero √≠mpar √© 1, que √© igual a } 1^2.
        ''')

        st.latex(r'''
        1 = 1^2
        ''')

        st.latex(r'''
        \textbf{Passo Indutivo:}
        \text{Suponha que a soma dos primeiros } k \text{ n√∫meros √≠mpares seja } k^2.
        \text{Queremos mostrar que a soma dos primeiros } k+1 \text{ n√∫meros √≠mpares √© } (k+1)^2.
        ''')

        sum_odd_k = sp.Sum(2*i - 1, (i, 1, k))
        sum_odd_k_plus_1 = sum_odd_k.doit() + (2*(k + 1) - 1)
        st.latex(sp.latex(sum_odd_k_plus_1))
        st.latex(r'''
        \text{Compare com } (k+1)^2:
        ''')
        st.latex(sp.latex((k + 1)**2))
        st.latex(r"Portanto,\ a\ soma\ dos\ primeiros\ k+1\ n√∫meros\ √≠mpares\ √©\ igual\ a\ (k+1)^2.")

    # Exerc√≠cio 3
    st.latex(r"Exerc√≠cio\ 3:\ Divisibilidade\ de\ 5^n - 1\ por\ 4")
    st.latex(r"Prove\ que\ 5^n - 1\ √©\ divis√≠vel\ por\ 4\ para\ todo\ n \geq 1.")

    if st.button("Mostrar Respostas Exerc√≠cio 3"):
        st.latex(r'''
        \textbf{Base da Indu√ß√£o:}
        \text{Para } n = 1: 5^1 - 1 = 4, \text{ que √© divis√≠vel por 4.}
        ''')

        st.latex(r'''
        \textbf{Passo Indutivo:}
        \text{Suponha que } 5^k - 1 \text{ seja divis√≠vel por 4.}
        \text{Queremos mostrar que } 5^{k+1} - 1 \text{ tamb√©m √© divis√≠vel por 4.}
        ''')

        expression = 5**(k+1) - 1
        prev_expression = 5**k - 1
        diff = expression - 5 * prev_expression
        st.latex(sp.latex(diff.simplify()))
        st.latex(r"Como\ a\ diferen√ßa\ √©\ divis√≠vel\ por\ 4,\ a\ proposi√ß√£o\ √©\ verdadeira\ para\ n = k+1.")

    # Exerc√≠cio 4
    st.latex(r"Exerc√≠cio\ 4:\ Divisibilidade\ de\ n^2 + n\ por\ 2")
    st.latex(r"Prove\ que\ para\ todo\ n \geq 1,\ n^2 + n\ √©\ divis√≠vel\ por\ 2.")

    if st.button("Mostrar Respostas Exerc√≠cio 4"):
        st.latex(r'''
        \textbf{Base da Indu√ß√£o:}
        \text{Para } n = 1: 1^2 + 1 = 2, \text{ que √© divis√≠vel por 2.}
        ''')

        st.latex(r'''
        \textbf{Passo Indutivo:}
        \text{Suponha que para } n = k, \text{ a express√£o } k^2 + k \text{ seja divis√≠vel por 2.}
        \text{Queremos mostrar que para } n = k+1, \text{ a express√£o } (k+1)^2 + (k+1) \text{ tamb√©m √© divis√≠vel por 2.}
        ''')

        next_case = (k + 1)**2 + (k + 1)
        st.latex(sp.latex(next_case))
        st.latex(r'''
        \text{Compare com a express√£o para } n = k:
        ''')
        st.latex(sp.latex(k**2 + k))
        st.latex(r"Como\ a\ diferen√ßa\ √©\ divis√≠vel\ por\ 2,\ a\ proposi√ß√£o\ √©\ verdadeira\ para\ n = k+1.")

if __name__ == "__main__":
    
    main()

    st.write("Autores: Jo√£o Renan Lopes e Pedro Herique Girotto")
